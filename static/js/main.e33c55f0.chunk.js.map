{"version":3,"sources":["Components/UserInfo.js","Components/Table.js","Components/CreateArea.js","Components/App.js","index.js"],"names":["UserInfo","props","person","className","firstName","lastName","description","address","streetAddress","city","state","zip","nullArrow","id","email","phone","Table","useState","arrowPositions","setArrowPositions","toggleArrow","e","field","target","closest","dataset","newState","onSort","unfoldedIndex","setUnfoldedIndex","unfoldRow","a","page","Number","getAttribute","window","scrollTo","document","body","scrollHeight","Object","keys","map","index","onClick","data-field","data","length","slice","entry","name","CreateArea","open","setOpen","inputFields","setInputFields","onInputChange","prev","value","closeModal","Modal","onClose","onOpen","trigger","Button","content","inverted","color","Header","Content","autoComplete","onChange","type","placeholder","Actions","labelPosition","icon","isNaN","onSubmit","positive","App","setData","loading","setLoading","chosen","setChosen","onGetEntries","url","size","fetch","response","json","newData","get","activePage","setActivePage","numOfPages","Math","ceil","newElement","newArray","splice","typeOfSort","sort","b","localeCompare","Pagination","onPageChange","paginationData","totalPages","pointing","secondary","data-size","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e33c55f0.chunk.js","sourcesContent":["import React from \"react\";\r\nconst UserInfo = (props) => {\r\n  let person = props.person;\r\n  return (\r\n    <div className=\"ui description\">\r\n      <div className=\"item\">\r\n        <p>\r\n          Выбран пользователь: <b>{`${person.firstName} ${person.lastName}`}</b>\r\n        </p>\r\n      </div>\r\n      <div className=\"item\">\r\n        <p>\r\n          <b>Описание: </b>\r\n          {person.description}\r\n        </p>\r\n      </div>\r\n      <div className=\"item\">\r\n        <p>\r\n          Адрес проживания: <b>{person.address?.streetAddress}</b>{\" \"}\r\n        </p>\r\n      </div>\r\n      <div className=\"item\">\r\n        <p>\r\n          Город: <b>{person.address?.city}</b>\r\n        </p>\r\n      </div>\r\n      <div className=\"item\">\r\n        <p>\r\n          Провинция / штат: <b>{person.address?.state}</b>\r\n        </p>\r\n      </div>\r\n      <div className=\"item\">\r\n        <p>\r\n          Индекс: <b>{person.address?.zip}</b>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default UserInfo;\r\n","import React, { useState } from \"react\";\r\nimport UserInfo from \"./UserInfo\";\r\nconst nullArrow = {\r\n  id: 0,\r\n  firstName: 0,\r\n  lastName: 0,\r\n  email: 0,\r\n  phone: 0,\r\n};\r\n\r\nconst Table = (props) => {\r\n  let [arrowPositions, setArrowPositions] = useState(nullArrow);\r\n\r\n  const toggleArrow = (e) => {\r\n    // 0 - initial state, after click becomes ascending order, arrow position is not changed\r\n    // 1 - ascending order, after click change arrow position and make descending order\r\n    // 2 - descending order, after click return to state 1\r\n    // on any click not affected arrows go to state 0\r\n    const field = e.target.closest(\"th\").dataset.field;\r\n    let newState = 0;\r\n    if (arrowPositions[field] === 0) {\r\n      newState = 1;\r\n    } else if (arrowPositions[field] === 1) {\r\n      newState = 2;\r\n    } else {\r\n      newState = 1;\r\n    }\r\n    setArrowPositions({\r\n      ...nullArrow,\r\n      [field]: newState,\r\n    });\r\n    if (newState === 1) {\r\n      props.onSort(field, \"ascending\");\r\n    } else {\r\n      props.onSort(field, \"descending\");\r\n    }\r\n  };\r\n\r\n  let [unfoldedIndex, setUnfoldedIndex] = useState(-1);\r\n  // async to wait until the information is rendered before scrolling down\r\n  const unfoldRow = async (e) => {\r\n    await setUnfoldedIndex(\r\n      // compute the clicked index based on the current page\r\n      (props.page - 1) * 50 +\r\n        Number(e.target.closest(\"tr\").getAttribute(\"name\"))\r\n    );\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  };\r\n  return (\r\n    <div>\r\n      <table className=\"ui celled large table\">\r\n        <thead>\r\n          <tr>\r\n            {Object.keys(nullArrow).map((field, index) => (\r\n              <th\r\n                key={index + props.data.length}\r\n                onClick={toggleArrow}\r\n                data-field={field}\r\n                className=\"three wide\"\r\n              >\r\n                {field}\r\n                <i\r\n                  className={\r\n                    arrowPositions[field] === 2\r\n                      ? \"angle up icon\"\r\n                      : \"angle down icon\"\r\n                  }\r\n                />\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.data\r\n            // select only 50 elements of the array based on the active page\r\n            .slice((props.page - 1) * 50, props.page * 50)\r\n            .map((entry, index) => (\r\n              <tr key={index} name={index} onClick={unfoldRow}>\r\n                <td>{entry.id}</td>\r\n                <td>{entry.firstName}</td>\r\n                <td>{entry.lastName}</td>\r\n                <td>{entry.email}</td>\r\n                <td>{entry.phone}</td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n      {/* show info only when a user first clicks */}\r\n      {unfoldedIndex !== -1 && <UserInfo person={props.data[unfoldedIndex]} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal } from \"semantic-ui-react\";\r\n\r\nconst CreateArea = (props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [inputFields, setInputFields] = useState({\r\n    id: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \" \",\r\n    phone: \"\",\r\n  });\r\n\r\n  const onInputChange = (e) => {\r\n    setInputFields((prev) => ({\r\n      ...prev,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setInputFields({\r\n      id: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n    });\r\n    setOpen(false);\r\n  };\r\n  const onSubmit = (e) => {\r\n    inputFields.id = Number(inputFields.id);\r\n    //if the input not a number set id to 0\r\n    if (Number.isNaN(inputFields.id)) {\r\n      inputFields.id = 0;\r\n    }\r\n    props.onSubmit(inputFields);\r\n    closeModal();\r\n  };\r\n  return (\r\n    <Modal\r\n      onClose={closeModal}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={\r\n        <div className=\"add-button\">\r\n          {\" \"}\r\n          <Button\r\n            className=\"add-button\"\r\n            content=\"+Add\"\r\n            inverted\r\n            color=\"violet\"\r\n          />\r\n        </div>\r\n      }\r\n    >\r\n      <Modal.Header>Add a new entry</Modal.Header>\r\n      <Modal.Content>\r\n        <div className=\"ui form\" autoComplete=\"off\">\r\n          <div className=\"field\">\r\n            <label>ID</label>\r\n            <input\r\n              name=\"id\"\r\n              onChange={onInputChange}\r\n              value={inputFields.id}\r\n              type=\"text\"\r\n              placeholder=\"id\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>First name</label>\r\n            <input\r\n              name=\"firstName\"\r\n              onChange={onInputChange}\r\n              value={inputFields.firstName}\r\n              type=\"text\"\r\n              placeholder=\"First Name\"\r\n            />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Last name</label>\r\n            <input\r\n              name=\"lastName\"\r\n              onChange={onInputChange}\r\n              value={inputFields.lastName}\r\n              type=\"text\"\r\n              placeholder=\"Last Name\"\r\n            />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Email</label>\r\n            <input\r\n              name=\"email\"\r\n              onChange={onInputChange}\r\n              value={inputFields.email}\r\n              type=\"text\"\r\n              placeholder=\"email\"\r\n            />\r\n          </div>\r\n          <div className=\"field\">\r\n            <label>Phone</label>\r\n            <input\r\n              name=\"phone\"\r\n              onChange={onInputChange}\r\n              value={inputFields.phone}\r\n              type=\"text\"\r\n              placeholder=\"phone\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color=\"black\" content=\"Close\" onClick={closeModal} />\r\n        {/* show the button only when all the fields are present */}\r\n        {inputFields.id &&\r\n          inputFields.firstName &&\r\n          inputFields.lastName &&\r\n          inputFields.email &&\r\n          inputFields.phone && (\r\n            <Button\r\n              content=\"Submit\"\r\n              labelPosition=\"right\"\r\n              icon=\"checkmark\"\r\n              onClick={onSubmit}\r\n              positive\r\n            />\r\n          )}\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CreateArea;\r\n","import React, { useState } from \"react\";\nimport Table from \"./Table\";\nimport CreateArea from \"./CreateArea\";\nimport { Button, Pagination } from \"semantic-ui-react\";\n\nconst App = () => {\n  // data stores the array of all objects\n  let [data, setData] = useState([]);\n  let [loading, setLoading] = useState(true);\n  //did a user choose the number of entries?\n  let [chosen, setChosen] = useState(false);\n\n  const onGetEntries = (e) => {\n    setChosen(true);\n    var url = \"\";\n    if (e.target.dataset.size === \"small\") {\n      url =\n        \"http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\n    } else {\n      url =\n        \"http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\";\n    }\n    // while loading we show the loading screen\n    const get = async () => {\n      const response = await fetch(url);\n      var newData = await response.json();\n      setData(newData);\n      setLoading(false);\n    };\n    get();\n  };\n\n  const onSort = (field, typeOfSort) => {\n    let newArray = [...data];\n    // if the field is a number use arifmetic comparator\n    if (typeof newArray[0][field] === \"number\") {\n      newArray.sort((a, b) => {\n        // ascending or descending order based on 2d argument\n        if (typeOfSort === \"ascending\") {\n          return a[field] - b[field];\n        }\n        return b[field] - a[field];\n      });\n    } else {\n      // string comparator\n      newArray.sort((a, b) => {\n        if (typeOfSort === \"ascending\") {\n          return a[field].localeCompare(b[field]);\n        }\n        return b[field].localeCompare(a[field]);\n      });\n    }\n    setData(newArray);\n  };\n\n  let [activePage, setActivePage] = useState(1);\n  const onPaginationChange = (e, paginationData) =>\n    setActivePage(paginationData.activePage);\n\n  let numOfPages = Math.ceil(data.length / 50);\n\n  const onSubmit = (newElement) => {\n    let newArray = [...data];\n    // add the new element to the array\n    newArray.splice((activePage - 1) * 50, 0, newElement);\n    setData(newArray);\n  };\n\n  if (!chosen) {\n    //initial screen\n    return (\n      <div className=\"buttons-centered\">\n        <h1>Choose the number:</h1>\n        <Button\n          onClick={onGetEntries}\n          content=\"32 entries\"\n          color=\"violet\"\n          size=\"large\"\n          data-size=\"small\"\n        />\n        <Button\n          onClick={onGetEntries}\n          content=\"1000 entries\"\n          color=\"green\"\n          size=\"large\"\n          data-size=\"large\"\n        />\n      </div>\n    );\n    // loading screen\n  } else if (loading) {\n    return (\n      <div className=\"ui active dimmer\">\n        <div className=\"ui big text loader\">Loading</div>\n      </div>\n    );\n  } else {\n    // maing screen\n    return (\n      <div>\n        <CreateArea page={activePage} data={data} onSubmit={onSubmit} />\n        <Table\n          data={data}\n          setData={setData}\n          onSort={onSort}\n          page={activePage}\n        />\n        <Pagination\n          activePage={activePage}\n          onPageChange={onPaginationChange}\n          totalPages={numOfPages}\n          pointing\n          secondary\n        />\n      </div>\n    );\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}